name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo check
        run: cargo check --all-features

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all-features

  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}

      - name: Run clippy
        run: cargo clippy --all-features -- -D warnings

  build-wasm:
    name: Build WebAssembly
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [wasm32-wasip1]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-wasm-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build for ${{ matrix.target }}
        run: cargo build --target ${{ matrix.target }} --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: crates-zed-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/crates-zed.wasm
          if-no-files-found: error

  validate-extension:
    name: Validate Extension
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Validate extension.toml
        run: |
          if [ ! -f extension.toml ]; then
            echo "Error: extension.toml not found"
            exit 1
          fi

          # Check required fields
          required_fields=("id" "name" "version" "schema_version")
          for field in "${required_fields[@]}"; do
            if ! grep -q "^$field = " extension.toml; then
              echo "Error: Required field '$field' not found in extension.toml"
              exit 1
            fi
          done

          echo "✓ extension.toml is valid"

      - name: Validate LICENSE
        run: |
          if [ ! -f LICENSE ]; then
            echo "Error: LICENSE file not found (required by Zed)"
            exit 1
          fi

          if grep -q "MIT License" LICENSE || grep -q "Apache License" LICENSE; then
            echo "✓ LICENSE file is valid (MIT or Apache 2.0)"
          else
            echo "Warning: LICENSE should be MIT or Apache 2.0 for Zed extensions"
          fi

      - name: Check README.md
        run: |
          if [ ! -f README.md ]; then
            echo "Warning: README.md not found"
          else
            echo "✓ README.md exists"
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [check, test, fmt, clippy, build-wasm, validate-extension]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.check.result }}" == "success" ]] && \
             [[ "${{ needs.test.result }}" == "success" ]] && \
             [[ "${{ needs.fmt.result }}" == "success" ]] && \
             [[ "${{ needs.clippy.result }}" == "success" ]] && \
             [[ "${{ needs.build-wasm.result }}" == "success" ]] && \
             [[ "${{ needs.validate-extension.result }}" == "success" ]]; then
            echo "✓ All checks passed!"
            exit 0
          else
            echo "✗ Some checks failed"
            exit 1
          fi
